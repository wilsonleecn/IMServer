{
  "name": "lowdb",
  "version": "0.5.1",
  "description": "Flat JSON file database",
  "keywords": [
    "flat",
    "file",
    "database",
    "JSON",
    "lo-dash",
    "lodash",
    "underscore",
    "underscore-db",
    "embed",
    "embeddable"
  ],
  "main": "src/index.js",
  "scripts": {
    "test": "mocha",
    "precommit": "npm test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/typicode/lowdb.git"
  },
  "author": {
    "name": "Typicode",
    "email": "typicode@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/typicode/lowdb/issues"
  },
  "homepage": "https://github.com/typicode/lowdb",
  "dependencies": {
    "graceful-fs": "^3.0.2",
    "lodash": "~2.4.1",
    "mv": "^2.0.3",
    "steno": "^0.1.1",
    "uuid": "^2.0.1"
  },
  "devDependencies": {
    "husky": "^0.6.1",
    "mocha": "^1.21.4",
    "rimraf": "^2.2.8",
    "underscore-db": "^0.8.0"
  },
  "readme": "# LowDB [![NPM version](https://badge.fury.io/js/lowdb.svg)](http://badge.fury.io/js/lowdb) [![Build Status](https://travis-ci.org/typicode/lowdb.svg?branch=master)](https://travis-ci.org/typicode/lowdb)\n\n> Flat JSON file database for Node\n\n* Serverless\n* Multiple databases\n* In-memory or disk-based\n* 80+ methods from Lo-Dash API\n* Asynchronous and fault-tolerant writing\n* Extendable\n\nLowDB uses Lo-Dash functional programming API instead of a MongoDB-like API. This makes it quite unique and different.\n\n_LowDB powers [JSON Server](https://github.com/typicode/json-server) and [JSONPlaceholder](http://jsonplaceholder.typicode.com/). If you need something similar for the browser, check [Underscore-db](https://github.com/typicode/underscore-db)._\n\n## Usage\n\n```javascript\nvar low = require('lowdb')\nvar db = low('db.json')\n\ndb('songs').push({ title: 'low!'})\n```\n\nDatabase is automatically created and saved to `db.json` in a readable format.\n\n```javascript\n{\n  \"songs\": [\n    {\n      \"title\": \"low!\"\n    }\n  ]\n}\n```\n\nData can be queried and manipulated using any Lo-Dash method.\n\n```javascript\nvar song = db('songs').find({ title: 'low!' }).value()\ndb('songs').remove({ title: 'low!' })\n```\n\nYou can also use id-based methods by extending LowDB with [Underscore-db](https://github.com/typicode/underscore-db).\n\n## API\n\n__low([filename])__\n\nCreates a disk-based or in-memory database instance. If a filename is provided, it loads or creates it.\n\n```javascript\nvar db = low()          // in-memory\nvar db = low('db.json') // disk-based\n```\n\n__low.mixin(source)__\n\nUse it to extend Lo-Dash globally with your own utility functions or third-party libraries.\n\n```javascript\n// Must be called before calling db('songs') for functions to be available.\nlow.mixin({\n  second: function(array) {\n    if (array.length >= 2) return array[1]\n  }\n})\n\nvar song = db('songs').second().value()\n```\n\n__low.stringify(obj)__ and __low.parse(str)__\n\nOverwrite these methods to customize JSON stringifying and parsing.\n\n__db.object__\n\nDatabase object. Useful if you want to access the content of your JSON file and don't want to go through Lo-Dash methods.\n\n```javascript\nconsole.log(db.object) // { songs: [ { title: 'low!' } ] }\ndb('songs').value() === db.object.songs\n```\n\n__db.save()__\n\nLowDB automatically saves to disk. However, in case you directly modify the content of the database object, you'll need to manually call `save`.\n\n```javascript\ndelete db.object.songs\ndb.save()\n```\n\n## Documentation\n\n### Operations\n\nWith LowDB you get access to the entire [Lo-Dash API](http://lodash.com/), so there's many, many ways to query and manipulate data. Here are a few examples to get you started.\n\nSort the top five songs.\n\n```javascript\ndb('songs')\n  .where({published: true})\n  .sortBy('views')\n  .first(5)\n  .value()\n```\n\nRetrieve song titles.\n\n```javascript\ndb('songs')\n  .pluck('titles')\n  .value()\n```\n\nGet the number of songs.\n\n```javascript\ndb('songs').size()\n```\n\nMake a deep clone of songs.\n\n```javascript\ndb('songs').cloneDeep().value\n```\n\nUpdate a song.\n\n```javascript\ndb('songs').find({ title: 'low!' }).assign({ title: 'hi!'})\n```\n\nRemove songs.\n\n```javascript\ndb('songs').remove({ title: 'low!' })\n```\n\n### Id-based resources support\n\nBeing able to retrieve data using an id can be quite useful, particularly in servers. To add id-based resources support to LowDB, you have 2 options.\n\n[Underscore-db](https://github.com/typicode/underscore-db) provides a set of helpers for creating and manipulating id-based resources.\n\n```javascript\nlow.mixin(require('underscore-db'))\n\nvar db = low('db.json')\n\nvar songId = db('songs').insert({ title: 'low!' }).value().id\nvar song   = db('songs').get(songId).value()\n```\n\nOr simply use [uuid](https://github.com/broofa/node-uuid).\n\n```javascript\nvar uuid = require('uuid')\n\nvar songId = db('songs').push({ id: uuid(), title: 'low!' }).value().id\nvar song   = db('songs').find({ id: songId }).value()\n```\n\nIn both cases, your `db.json` will then look like this.\n\n```javascript\n{\n  \"songs\": [\n    {\n      \"id\": \"e31aa48c-a9d8-4f79-9fce-ded4c16c3c4c\",\n      \"title\": \"low!\"\n    }\n  ]\n}\n```\n\n## Changelog\n\nSee details changes for each version in the [release notes](https://github.com/typicode/lowdb/releases).\n\n## Limits\n\nLowDB is a convenient method for storing data without setting up a database server. It's fast enough and safe to be used as an embedded database.\n\nHowever, if you need high performance and scalability more than simplicity, you should stick to databases like MongoDB.\n\n## License\n\nLowDB is released under the MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "lowdb@0.5.1",
  "dist": {
    "shasum": "c38d637984656f7fe5e25e8336c60cb70465f2df"
  },
  "_from": "lowdb@^0.5.0",
  "_resolved": "https://registry.npmjs.org/lowdb/-/lowdb-0.5.1.tgz"
}
