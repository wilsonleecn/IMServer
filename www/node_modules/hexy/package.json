{
  "name": "hexy",
  "version": "0.2.7",
  "description": "hexdump, binary pretty-printing",
  "author": {
    "name": "Tim Becker",
    "email": "tim.becker@kuriositaet.de"
  },
  "main": "./hexy.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/a2800276/hexy.js.git"
  },
  "scripts": {
    "test": "node ./test.js"
  },
  "bin": {
    "hexy": "./bin/hexy_cmd.js"
  },
  "readme": "[![build status](https://secure.travis-ci.org/a2800276/hexy.js.png)](http://travis-ci.org/a2800276/hexy.js)\n# hexy.js -- utility to create hex dumps \n\n`hexy` is a javascript library that's easy to use to create hex dumps. It\nworks well in node and has cursory browser (more below) support. It contains a\nnumber of options to configure how the hex dump will end up looking.\n\nIt should create a pleasant looking hex dumb by default:\n    \n    var hexy = require('hexy'),\n           b = new Buffer(\"\\000\\001\\003\\005\\037\\012\\011bcdefghijklmnopqrstuvwxyz0123456789\")\n    \n    console.log(hexy.hexy(b))\n\nresults in this dump:\n\n    00000000: 0001 0305 1f0a 0962 6364 6566 6768 696a  .......bcdefghij\n    00000010: 6b6c 6d6e 6f70 7172 7374 7576 7778 797a  klmnopqrstuvwxyz\n    00000020: 3031 3233 3435 3637 3839                 0123456789\n\nbut it's also possible to configure:\n\n  * Line numbering\n  * Line width\n  * Format of byte grouping\n  * Case of hex decimals\n  * Presence of the ASCII annotation in the right column.\n\nThis mean it's easy to generate exciting dumps like:\n\n    0000000: 0001 0305 1f0a 0962  .... ...b \n    0000008: 6364 6566 6768 696a  cdef ghij \n    0000010: 6b6c 6d6e 6f70 7172  klmn opqr \n    0000018: 7374 7576 7778 797a  stuv wxyz \n    0000020: 3031 3233 3435 3637  0123 4567 \n    0000028: 3839                 89\n\nor even:\n\n    0000000: 00 01 03 05 1f 0a 09 62   63 64 65 66 67 68 69 6a \n    0000010: 6b 6c 6d 6e 6f 70 71 72   73 74 75 76 77 78 79 7a \n    0000020: 30 31 32 33 34 35 36 37   38 39\n\nwith hexy!\n \nFormatting options are configured by passing a `format` object to the `hexy` function:\n\n    var format = {}\n        format.width = width // how many bytes per line, default 16\n        format.numbering = n // [\"hex_bytes\" | \"none\"],  default \"hex_bytes\"\n        format.format = f    // [\"fours\"|\"twos\"|\"none\"], how many nibbles per group\n                             //                          default \"fours\"\n        format.caps = c      // [\"lower\"|\"upper\"],       default lower\n        format.annotate=a    // [\"ascii\"|\"none\"], ascii annotation at end of line?\n                             //                          default \"ascii\"\n        format.prefix=p      // <string> something pretty to put in front of each line\n                             //                          default \"\"\n        format.indent=i      // <num> number of spaces to indent\n                             //                          default 0\n        format.html=true     // funky html divs 'n stuff! experimental.\n                             //                          default: false\n\n    console.log(hexy.hexy(buffer, format))\n\nIn case you're really nerdy, you'll have noticed that the defaults correspond\nto how `xxd` formats it's output.\n           \n\n## Installing\n\nEither use `npm`:\n  \n    npm install hexy\n\nThis will install the lib which you'll be able to use like so:\n    \n    var hexy = require(\"hexy\"),\n        buf  = // get Buffer from somewhere,\n        str  = hexy.hexy(buf)\n\nIt will also install `hexy` into your path in case you're totally fed up\nwith using `xxd`.\n        \n \nIf you don't like `npm`, grab the source from github:\n\n    http://github.com/a2800276/hexy.js\n\n## Browser Support\n\nBasically eveything should work fine in the browser as well, just\ninclude hexy.js in a script tag, and you'll get `hexy` and `Hexy` stuck\nto the global object (window).\n\nSome caveats: \"Works fine on my systemâ„¢\". Browser support is 'new' and\nnot thoroughly tested (... eh, only on chrome [Version: whatever I'm\ncurrently running]). Under node, I can generally assume that binary data\nis passed in in a sane fashion using buffers, but plain old Javascript\ndoesn't really have any datatypes that can handle bytes gracefully.\nCurrently only Strings are supported, I'd like to add numeric and typed\narrays.\n\nLet me know in case you run into any issues, I'd be happy to find out\nabout them.\n\n## TODOS\n\nThe current version only pretty prints node Buffer and JS Strings. This\nshould be expanded to also do typed arrays, Streams/series of Buffers\nwhich would be nice so you don't have to collect the whole things you\nwant to pretty print in memory, and such.\n\nI'd like to improve html rendering, e.g. to be able to mouse over the\nascii annotation and highlight the hex byte and vice versa, improve\nbrowser integration and set up a proper build & packaging system.\n\n \n## Thanks\n\n* Thanks to Isaac Schlueter [isaacs] for gratiously lending a hand and\ncheering me up.\n* dodo (http://coderwall.com/dodo)\n* the fine folks at [Travis](http://travis-ci.org/a2800276/hexy.js)\n* radare (https://github.com/radare)\n* Michele Caini (https://github.com/skypjack)\n\n## History\n\nThis is a fairly straightforward port of `hexy.rb` which does more or less the\nsame thing. You can find it here: \n \n    http://github.com/a2800276/hexy\n \nin case these sorts of things interest you.\n\n## Mail\n\nIn case you discover bugs, spelling errors, offer suggestions for\nimprovements or would like to help out with the project, you can contact\nme directly (tim@kuriositaet.de). \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/a2800276/hexy.js/issues"
  },
  "_id": "hexy@0.2.7",
  "dist": {
    "shasum": "2011c2aaee4bb4961ec7b3fe899b2614f6e7469e"
  },
  "_from": "hexy@^0.2.6",
  "_resolved": "https://registry.npmjs.org/hexy/-/hexy-0.2.7.tgz"
}
